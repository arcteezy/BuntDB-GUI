{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/components/data-content/data-content.component.css","webpack:///./src/app/components/data-content/data-content.component.html","webpack:///./src/app/components/data-content/data-content.component.ts","webpack:///./src/app/components/navbar/navbar.component.css","webpack:///./src/app/components/navbar/navbar.component.html","webpack:///./src/app/components/navbar/navbar.component.ts","webpack:///./src/app/services/data.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<app-navbar></app-navbar>\\n<app-data-content></app-data-content>\\n\"","import { Component } from '@angular/core';\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'bunt-gui';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule } from '@angular/forms';\n\n// Components\nimport { AppComponent } from './app.component';\nimport { NavbarComponent } from './components/navbar/navbar.component';\nimport { DataContentComponent } from './components/data-content/data-content.component';\n\n// Services\nimport { DataService } from './services/data.service'\n \n@NgModule({\n  declarations: [\n    AppComponent,\n    NavbarComponent,\n    DataContentComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    FormsModule\n  ],\n  providers: [\n    DataService\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"\"","module.exports = \"<div class=\\\"container p-4\\\">\\n  <div class=\\\"btn-group mb-4\\\" role=\\\"group\\\" aria-label=\\\"Basic example\\\">\\n    <!-- Add data button -->\\n    <button type=\\\"button\\\" class=\\\"btn btn-dark\\\" data-toggle=\\\"modal\\\" data-target=\\\"#addDataModal\\\">Add data</button>\\n    <button type=\\\"button\\\" class=\\\"btn btn-dark\\\" (click)=\\\"getAllData()\\\">Refresh</button>\\n  </div>\\n  <!-- Modal -->\\n  <div class=\\\"modal fade\\\" id=\\\"addDataModal\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"exampleModalLabel\\\" aria-hidden=\\\"true\\\">\\n    <div class=\\\"modal-dialog modal-dialog-centered\\\" role=\\\"document\\\">\\n      <div class=\\\"modal-content\\\">\\n        <div class=\\\"modal-header\\\">\\n          <h5 class=\\\"modal-title\\\" id=\\\"exampleModalLabel\\\">Add data into database</h5>\\n          <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-label=\\\"Close\\\">\\n            <span aria-hidden=\\\"true\\\">&times;</span>\\n          </button>\\n        </div>\\n        <div class=\\\"modal-body\\\">\\n          <!-- Add data form -->\\n          <form>\\n            <!-- Key   -->\\n            <div class=\\\"form-group\\\">\\n              <label for=\\\"key\\\">Key</label>\\n              <input \\n                    type=\\\"text\\\" \\n                    class=\\\"form-control\\\"\\n                    required\\n                    name=\\\"key\\\"\\n                    [(ngModel)]=\\\"newData.key\\\"\\n                    #key=\\\"ngModel\\\">\\n            </div>\\n            <!-- Value -->\\n            <div class=\\\"form-group\\\">\\n              <label for=\\\"value\\\">Value</label>\\n              <input \\n                    type=\\\"text\\\" \\n                    class=\\\"form-control\\\"\\n                    required\\n                    name=\\\"value\\\"\\n                    [(ngModel)]=\\\"newData.value\\\"\\n                    #value=\\\"ngModel\\\">\\n            </div>\\n          </form>\\n        </div>\\n        <div class=\\\"modal-footer\\\">\\n          <!-- Submit -->\\n          <button type=\\\"button\\\" class=\\\"btn btn-dark\\\" data-dismiss=\\\"modal\\\" (click)=\\\"addData()\\\">Add</button>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n  <!-- Existing data -->\\n  <h6 class=\\\"text-secondary\\\">\\n    Data in DB :\\n  </h6>\\n  <ul class=\\\"list-group\\\">\\n    <li class=\\\"list-group-item bg-dark\\\">\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-2 text-center\\\">\\n          <h5 class=\\\"text-white\\\">\\n            Key\\n          </h5>\\n        </div>\\n        <div class=\\\"col-10 text-center\\\">\\n          <h5 class=\\\"text-white\\\">\\n            Value\\n          </h5>\\n        </div>\\n      </div>\\n    </li>\\n    <li class=\\\"list-group-item\\\" *ngFor=\\\"let data of dataContent\\\">\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-2 text-center\\\">\\n          {{data.key}}\\n        </div>\\n        <div class=\\\"col-10 text-center\\\">\\n          {{data.value}}\\n        </div>\\n      </div>\\n    </li>\\n  </ul>\\n</div>\"","import { Component, OnInit } from '@angular/core';\n// Services\nimport { DataService } from '../../services/data.service'\n\n@Component({\n  selector: 'app-data-content',\n  templateUrl: './data-content.component.html',\n  styleUrls: ['./data-content.component.css']\n})\nexport class DataContentComponent implements OnInit {\n\n  // Whole data\n  dataContent : {\n    key : string,\n    value : string\n  }\n  // New data\n  newData : {\n    key : string,\n    value : string\n  }\n\n  constructor(\n    private dataService : DataService\n  ) { }\n\n  ngOnInit() {\n\n    // Init\n    this.newData = {\n      key : '',\n      value : ''\n    }\n\n    // Load existing data\n    this.getAllData()\n\n  }\n\n  // Add data function\n  addData() {\n    console.log(\"Adding new data :\",this.newData);\n    // If null key\n    if(this.newData.key==''){\n      alert(\"Null key\")\n    }else{\n      this.dataService.writeData(this.newData).subscribe(\n        response => {\n          console.log(\"Write data response :\",response);\n          if(response!=null){\n            if(response.body==\"SUCCESSFUL\"){\n              alert(\"Write success\")\n            }\n          }\n        },error => {\n          console.log(\"Error :\",error.error);\n          alert(\"Write falied\")\n        }\n      )\n    }\n  }\n\n  // Get all data function\n  getAllData() {\n    this.dataService.getAllData().subscribe(\n      response => {\n        console.log(\"Get all data response : \",response)\n        if(response!=null){\n          this.dataContent=JSON.parse(response.body)\n        }\n      },error => {\n        console.log(\"Error : \",error.error)\n      }\n    )\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<nav class=\\\"navbar navbar-dark bg-dark\\\">\\n  <span class=\\\"navbar-brand ml-4 m-2 h1\\\"><i class=\\\"fa fa-database fa-fw\\\"></i> BuntDB GUI</span>\\n</nav>\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css']\n})\nexport class NavbarComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { APIResponse } from '../models/APIResponse'\n\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type':  'application/json'\n  })\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n\n  // Go server\n  serverURL = \"http://localhost:8080\"\n\n  constructor(\n    private http : HttpClient\n  ) { }\n\n  // Load all data\n  getAllData():Observable<APIResponse> {\n    return this.http.get<APIResponse>(this.serverURL+'/getAllData')\n  }\n\n  // Write data\n  writeData(data:any):Observable<APIResponse> {\n    return this.http.post<APIResponse>(this.serverURL+'/writeData',data,httpOptions)\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n"],"sourceRoot":""}